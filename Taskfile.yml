version: '3'

dotenv:
# Load environment variables from .env file
- ./app.env

tasks:

  ##################################################
  # Docker Tasks
  ##################################################
  compose:
    desc: "Run docker compose"
    cmds:
    - docker-compose up -d --force-recreate

  logs-psql:
    desc: "Show logs for postgres"
    preconditions:
    - sh: docker ps | grep {{.POSTGRE_CONTAINER_NAME}} > /dev/null
      msg: "Postgres container is not running. Please start it first."
    cmds:
    - docker logs {{.POSTGRE_CONTAINER_NAME}}

  stop-psql:
    desc: "Stop the postgres container"
    preconditions:
    - sh: docker ps | grep {{.POSTGRE_CONTAINER_NAME}} > /dev/null
      msg: "Postgres container is not running. Please start it first."
    cmds:
    - docker stop {{.POSTGRE_CONTAINER_NAME}}
    - echo "Postgres container stopped."

  ##################################################
  # Postgres Tasks
  ##################################################

  psql:
    desc: "Run psql"
    preconditions:
    - sh: docker ps | grep {{.POSTGRE_CONTAINER_NAME}} > /dev/null
      msg: "Postgres container is not running. Please start it first."
    cmds:
    - docker exec -it {{.POSTGRE_CONTAINER_NAME}} psql -U postgres

  create-db:
    desc: "Create the database"
    preconditions:
    - sh: docker ps | grep {{.POSTGRE_CONTAINER_NAME}} > /dev/null
      msg: "Postgres container is not running. Please start it first."
    cmds:
    - echo "Creating database..."
    - docker exec -it {{.POSTGRE_CONTAINER_NAME}} createdb -U postgres simple_bank
    - echo "Database created."
    silent: true

  drop-db:
    desc: "Drop the database"
    preconditions:
    - sh: docker ps | grep {{.POSTGRE_CONTAINER_NAME}} > /dev/null
      msg: "Postgres container is not running. Please start it first."
    cmds:
    - echo "Dropping database..."
    - docker exec -it {{.POSTGRE_CONTAINER_NAME}} dropdb -f -U postgres simple_bank
    - echo "Database dropped."
    silent: true

  dump-schema:
    desc: "Dump the database schema"
    preconditions:
    - sh: docker ps | grep {{.POSTGRE_CONTAINER_NAME}} > /dev/null
      msg: "Postgres container is not running. Please start it first."
    cmds:
    - echo "Dumping schema..."
    - docker exec -it {{.POSTGRE_CONTAINER_NAME}} pg_dump -U postgres -s simple_bank > ./db/schema.sql
    - echo "Schema dumped."
    silent: true

  ##################################################
  # Migration Tasks
  ##################################################

  migrate-create:
    desc: |
      Run all migrations up.
      To run it : task migrate-create -- name_of_migration
    requires:
      vars:
      - CLI_ARGS
    cmds:
    - echo "Creating migration file..."
    - migrate create -ext sql -dir {{.MIGRATIONS_DIR}} -seq {{.CLI_ARGS}}
    - echo "Migration file created."
    silent: true

  migrate-up:
    desc: |
      To run it : task migrate-up
    cmds:
    - echo "Running migrations up..."
    - migrate -path {{.MIGRATIONS_DIR}} -database {{.DB_SOURCE}} -verbose up
    - echo "Migrations up completed."
    silent: true

  migrate-down:
    desc: |
      To run it : task migrate-down
    cmds:
    - echo "Running migrations down..."
    - migrate -path {{.MIGRATIONS_DIR}} -database {{.DB_SOURCE}} down
    - echo "Migrations down completed."
    silent: true

  ##################################################
  # SQLC Tasks
  ##################################################

  sqlc:
    desc: |
      Generate GO code from SQL queries.
    preconditions:
    - sh: command -v sqlc > /dev/null
      msg: SQLC is not installed. Please install it first.
    cmds:
    - echo "Running sqlc..."
    - sqlc generate
    - echo "sqlc completed."
    silent: true

  ##################################################
  # Go Tests 
  ##################################################

  test:
    desc: |
      Run all tests.
    cmds:
    - echo "Running tests..."
    - go test -v -cover -count=1 ./...
    - echo "Tests completed."
    silent: true
  ##################################################
  # Server Tasks
  ##################################################

  server:
    desc: |
      Run the server.
    cmds:
    - echo "Running server..."
    - go run ./
    silent: true

  api-test:
    desc: |
      Run the API tests.
    preconditions:
    - sh: command -v httpyac > /dev/null
      msg: httpyac is not installed. Please install it first.
    - sh: lsof -i :8080 > /dev/null
      msg: "Server is not running. Please start it first using 'task server'."
    cmds:
    - echo "Running API tests..."
    - httpyac ./api.http
    - echo "API tests completed."
    silent: true

  ##################################################
  # Update deps
  ##################################################
  update-deps:
    desc: |
      Update all dependencies.
    cmds:
    - echo "Updating dependencies..."
    - go get -u ./...
    - go mod tidy
    - echo "Dependencies updated."
    silent: true

  ##################################################
  # Mocks
  ##################################################
  mock:
    desc: |
      Generate mocks for the interfaces.
    preconditions:
    - sh: command -v mockgen > /dev/null
      msg: mockgen is not installed. Please install it first.
    cmds:
    - echo "Generating mocks..."
    - mockgen -package mockdb -destination db/mock/store.go github.com/davidyannick86/simple-bank/db/sqlc Store
    - echo "Mocks generated."
    silent: true
